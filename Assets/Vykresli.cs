using System.Collections;
using System.Collections.Generic;
using UnityEngine;


public class Vykresli : MonoBehaviour
{
    public Texture robot;
    public Texture cage;
    public Texture way;
    public Texture start;
    public Texture full;

    public bool is_full_0 = true;
    public bool is_full_1 = true;
    public bool is_full_2 = true;
    public bool is_full_3 = true;
    public bool is_full_4 = true;



    public int[] pole = new[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,1,2,0,0,3,4,0,0,5,6,0,0,7,8,0,0,9,10,0,0,11,12,0,0,13,14,0,0,15,16,0,0,17,18,0,0,19,20,0,0,21,22,0,0,23,24,0,0,25,26,0,0,27,28,0,0,29,30,0,0,0,0,
                                 0,31,32,0,0,33,34,0,0,35,36,0,0,37,38,0,0,39,40,0,0,41,42,0,0,43,44,0,0,45,46,0,0,47,48,0,0,49,50,0,0,51,52,0,0,53,54,0,0,55,56,0,0,57,58,0,0,59,60,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,0,61,62,0,0,63,64,0,0,65,66,0,0,67,68,0,0,69,70,0,0,71,72,0,0,73,74,0,0,75,76,0,0,77,78,0,0,79,80,0,0,81,82,0,0,83,84,0,0,85,86,0,0,87,88,0,0,89,90,0,0,0,0,
                                 0,91,92,0,0,93,94,0,0,95,96,0,0,97,98,0,0,99,100,0,0,101,102,0,0,103,104,0,0,105,106,0,0,107,108,0,0,109,110,0,0,111,112,0,0,113,114,0,0,115,116,0,0,117,118,0,0,119,120,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,121,122,0,0,123,124,0,0,125,126,0,0,127,128,0,0,129,130,0,0,131,132,0,0,133,134,0,0,135,136,0,0,137,138,0,0,139,140,0,0,141,142,0,0,143,144,0,0,145,146,0,0,147,148,0,0,149,150,0,0,0,0,
                                 0,151,152,0,0,153,154,0,0,155,156,0,0,157,158,0,0,159,160,0,0,161,162,0,0,163,164,0,0,165,166,0,0,167,168,0,0,169,170,0,0,171,172,0,0,173,174,0,0,175,176,0,0,177,178,0,0,179,180,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,181,182,0,0,183,184,0,0,185,186,0,0,187,188,0,0,189,190,0,0,191,192,0,0,193,194,0,0,195,196,0,0,197,198,0,0,199,200,0,0,201,202,0,0,203,204,0,0,205,206,0,0,207,208,0,0,209,210,0,0,0,0,
                                 0,211,212,0,0,213,214,0,0,215,216,0,0,217,218,0,0,219,220,0,0,221,222,0,0,223,224,0,0,225,226,0,0,227,228,0,0,229,230,0,0,231,232,0,0,233,234,0,0,235,236,0,0,237,238,0,0,239,240,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,241,242,0,0,243,244,0,0,245,246,0,0,247,248,0,0,249,250,0,0,251,252,0,0,253,254,0,0,255,256,0,0,257,258,0,0,259,260,0,0,261,262,0,0,263,264,0,0,265,266,0,0,267,268,0,0,269,270,0,0,0,0,
                                 0,271,272,0,0,273,274,0,0,275,276,0,0,277,278,0,0,279,280,0,0,281,282,0,0,283,284,0,0,285,286,0,0,287,288,0,0,289,290,0,0,291,292,0,0,293,294,0,0,295,296,0,0,297,298,0,0,299,300,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,301,302,0,0,303,304,0,0,305,306,0,0,307,308,0,0,309,310,0,0,311,312,0,0,313,314,0,0,315,316,0,0,317,318,0,0,319,320,0,0,321,322,0,0,323,324,0,0,325,326,0,0,327,328,0,0,329,330,0,0,0,0,
                                 0,331,332,0,0,333,334,0,0,335,336,0,0,337,338,0,0,339,340,0,0,341,342,0,0,343,344,0,0,345,346,0,0,347,348,0,0,349,350,0,0,351,352,0,0,353,354,0,0,355,356,0,0,357,358,0,0,359,360,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,361,362,0,0,363,364,0,0,365,366,0,0,367,368,0,0,369,370,0,0,371,372,0,0,373,374,0,0,375,376,0,0,377,378,0,0,379,380,0,0,381,382,0,0,383,384,0,0,385,386,0,0,387,388,0,0,389,390,0,0,0,0,
                                 0,391,392,0,0,393,394,0,0,395,396,0,0,397,398,0,0,399,400,0,0,401,402,0,0,403,404,0,0,405,406,0,0,407,408,0,0,409,410,0,0,411,412,0,0,413,414,0,0,415,416,0,0,417,418,0,0,419,420,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,421,422,0,0,423,424,0,0,425,426,0,0,427,428,0,0,429,430,0,0,431,432,0,0,433,434,0,0,435,436,0,0,437,438,0,0,439,440,0,0,441,442,0,0,443,444,0,0,445,446,0,0,447,448,0,0,449,450,0,0,0,0,
                                 0,451,452,0,0,453,454,0,0,455,456,0,0,457,458,0,0,459,460,0,0,461,462,0,0,463,464,0,0,465,466,0,0,467,468,0,0,469,470,0,0,471,472,0,0,473,474,0,0,475,476,0,0,477,478,0,0,479,480,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,481,482,0,0,483,484,0,0,485,486,0,0,487,488,0,0,489,490,0,
                                 0,491,492,0,0,493,494,0,0,495,496,0,0,497,498,0,0,499,500,0,0,501,502,0,0,503,504,0,0,505,506,0,0,507,508,0,0,509,510,0,0,0,0,0,511,512,0,0,513,514,0,0,515,516,0,0,517,518,0,0,519,520,0,
                                 0,521,522,0,0,523,524,0,0,525,526,0,0,527,528,0,0,529,530,0,0,531,532,0,0,533,534,0,0,535,536,0,0,537,538,0,0,539,540,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,541,542,0,0,543,544,0,0,545,546,0,0,547,548,0,0,549,550,0,0,551,552,0,0,553,554,0,0,555,556,0,0,557,558,0,0,559,560,0,0,561,562,0,0,563,564,0,0,565,566,0,0,567,568,0,0,569,570,0,0,0,0,
                                 0,571,572,0,0,573,574,0,0,575,576,0,0,577,578,0,0,579,580,0,0,581,582,0,0,583,584,0,0,585,586,0,0,587,588,0,0,589,590,0,0,591,592,0,0,593,594,0,0,595,596,0,0,597,598,0,0,599,600,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,0,0,0,0,0,0,0,2003,0,0,0,0,0,2004,0,0,0,0,0,0,0,2002,0,0,0,0,0,0,0,0,0,0,2001,0,0,0,0,0,0,0,0,0,0,0,0,2000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,0,0,0,1000,0,0,0,0,0,0,1003,0,0,0,0,0,0,0,1002,0,0,0,0,0,0,0,0,0,0,0,0,1001,0,0,0,0,0,0,0,0,0,0,0,0,0,1004,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

 

    void OnGUI()
    {
        //Debug.Log(camera.pixelWidth+" "+ camera.pixelHeight);

        for (int i = 0; i != 35; i++)
        {
            for (int k = 0; k != 63; k++)
            {
               // Debug.Log(pole[i * k]);
                if (pole[i * 63 + k] == 0)
                    GUI.Label(new Rect(k * 17, i * 17, 22, 22), way);

                if ((pole[i * 63 + k] >= 1) && (pole[i * 63 + k] < 1000))
                    GUI.Label(new Rect(k * 17, i * 17, 22, 22), cage);

                if ((pole[i * 63 + k] >= 1000) && (pole[i * 63 + k] < 2000))
                    GUI.Label(new Rect(k * 17, i * 17, 22, 22), start);

                if (pole[i * 63 + k] == 2000)
                    if(is_full_0)
                        GUI.Label(new Rect(k * 17, i * 17, 22, 22), full);
                    else
                        GUI.Label(new Rect(k * 17, i * 17, 22, 22), robot);
                if (pole[i * 63 + k] == 2001)
                    if (is_full_1)
                        GUI.Label(new Rect(k * 17, i * 17, 22, 22), full);
                    else
                        GUI.Label(new Rect(k * 17, i * 17, 22, 22), robot);
                if (pole[i * 63 + k] == 2002)
                    if (is_full_2)
                        GUI.Label(new Rect(k * 17, i * 17, 22, 22), full);
                    else
                        GUI.Label(new Rect(k * 17, i * 17, 22, 22), robot);
                if (pole[i * 63 + k] == 2003)
                    if (is_full_3)
                        GUI.Label(new Rect(k * 17, i * 17, 22, 22), full);
                    else
                        GUI.Label(new Rect(k * 17, i * 17, 22, 22), robot);
                if (pole[i * 63 + k] == 2004)
                    if (is_full_4)
                        GUI.Label(new Rect(k * 17, i * 17, 22, 22), full);
                    else
                        GUI.Label(new Rect(k * 17, i * 17, 22, 22), robot);
            }
            
        }
    }
}
